plugins {
    alias(fabric.plugins.fabric.loom)
}

archivesBaseName = 'refinedstorage2-platform-fabric'

repositories {
    maven {
        name = 'JEI'
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = 'ModMenu'
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        name = 'Cloth Config, REI'
        url 'https://maven.shedaniel.me/'
    }
    maven {
        name = 'Parchment'
        url 'https://maven.parchmentmc.org'
    }
    maven {
        name = 'wthit'
        url "https://maven.bai.lol"
    }
    maven {
        name = 'NoIndium'
        url = 'https://maven.cafeteria.dev/releases/'
    }
}

dependencies {
    minecraft fabric.minecraft
    mappings loom.layered() {
        officialMojangMappings()
        parchment variantOf(fabric.parchment) {
            artifactType("zip")
        }
    }
    modImplementation fabric.fabric.loader
    modImplementation fabric.fabric.api

    project.ext.apis.collect {
        implementation project(it)
        include project(it)
    }
    project.ext.compileApis.collect {
        implementation project(it)
    }

    modImplementation(fabric.cloth.config) {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    include fabric.cloth.config

    modImplementation(fabric.teamreborn.energy) {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    include fabric.teamreborn.energy

    modImplementation fabric.noIndium
    include fabric.noIndium

    modImplementation fabric.modmenu

    modCompileOnly(fabric.rei.api) {
        exclude(group: 'me.shedaniel.cloth')
        exclude(group: 'dev.architectury')
    }
    modCompileOnly(fabric.rei.plugin) {
        exclude(group: 'me.shedaniel.cloth')
        exclude(group: 'dev.architectury')
    }
    modCompileOnly(fabric.architectury)
    modRuntimeOnly fabric.bundles.rei.runtime

    modCompileOnly fabric.jei.common.api
    // modRuntimeOnly fabric.jei.fabric.impl

    modRuntimeOnly fabric.wthit
}

loom {
    accessWidenerPath = file("src/main/resources/refinedstorage2.accesswidener")
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    mixin {
        showMessageTypes = true
        messages {
            // silence the warning from shadowing a synthetic field in AbstractModelBakerImplMixin
            TARGET_ELEMENT_NOT_FOUND = 'disabled'
        }
    }
}

processResources {
    from project(":refinedstorage2-platform-common").sourceSets.main.resources
}

tasks.withType(JavaCompile) {
    project.ext.compileApis.collect {
        source(project(it).sourceSets.main.allSource)
    }
}

jar {
    from '../LICENSE.md'
}
